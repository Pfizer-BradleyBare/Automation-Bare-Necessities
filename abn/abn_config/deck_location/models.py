from django.db import models
from polymorphic.models import PolymorphicModel

from abn_config.carrier.models import CarrierBase
from abn_config.transport.models import (
    TransportBase,
    TransportGetOptions,
    TransportPlaceOptions,
)


class DeckLocationBase(PolymorphicModel):
    class Meta:
        ordering = ["identifier"]

    identifier = models.CharField(
        max_length=50,
        unique=True,
        primary_key=True,
        blank=False,
        null=False,
        default="None",
        help_text="Unique ID for the item. Leave as 'None' to use an autogenerated identifier.",
    )
    carrier = models.ForeignKey(
        to=CarrierBase,
        on_delete=models.CASCADE,
    )
    position = models.PositiveSmallIntegerField()

    def clean(self) -> None:
        if self.identifier.lower() == "none":
            self.identifier = f"{self.carrier.identifier}_Pos{self.position}"

        return super().clean()

    def __str__(self) -> str:
        return self.identifier


class NonTransportableDeckLocation(DeckLocationBase): ...


class TransportConfig(models.Model):
    transport_device = models.ForeignKey(to=TransportBase, on_delete=models.CASCADE)
    get_options = models.ManyToManyField(to=TransportGetOptions)
    place_options = models.ManyToManyField(to=TransportPlaceOptions)


class TransportableDeckLocation(DeckLocationBase):
    transport_configs = models.ManyToManyField(to=TransportConfig)
